const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const sql = require("mssql");

const app = express();
const PORT = 3000;

// –ò—Å–ø–æ–ª—å–∑—É–µ–º CORS, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –º–æ–≥ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
app.use(cors());
app.use(bodyParser.json());

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbConfig = {
  user: "User080",
  password: "User080^]98",
  server: "192.168.112.103", // –ù–∞–ø—Ä–∏–º–µ—Ä, "university.database.windows.net"
  database: "db22207",
  options: {
    encrypt: true,
    trustServerCertificate: true,
  },
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function connectDB() {
  try {
    await sql.connect(dbConfig);
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ:", err);
  }
}
connectDB();

// üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É—Ä–æ–∫–∏ —Å —É—á–∏—Ç–µ–ª—è–º–∏
app.get("/lessons", async (req, res) => {
  try {
    const result = await sql.query(`
      SELECT 
        l.intLessonId AS id,
        s.txtSubjectName AS subject,
        CONVERT(VARCHAR(10), l.datLessonDate, 120) AS date,  -- –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è
        l.txtTheme AS theme,
        t.txtTeacherName AS teacher
      FROM tblLesson l
      JOIN tblSubject s ON l.intSubjectId = s.intSubjectId
      JOIN tblTeacher t ON s.intTeacherId = t.intTeacherId
    `);
    res.json(result.recordset);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–∫–æ–≤:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});
app.post("/lesson", async (req, res) => {
  const { subject, date, theme } = req.body;

  try {
    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    const request = new sql.Request();
    request.input("subject", sql.NVarChar, subject);
    request.input("date", sql.Date, date);
    request.input("theme", sql.NVarChar, theme);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    await request.query(`
        INSERT INTO tblLesson (intSubjectId, datLessonDate, txtTheme)
        VALUES (
          (SELECT intSubjectId FROM tblSubject WHERE txtSubjectName = @subject),
          @date,
          @theme
        )
      `);

    res.status(201).json({ message: "–£—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});
// üîπ –ü–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–µ–Ω–∏–∫–∞—Ö –ø–æ —É—Ä–æ–∫–∞–º
app.get("/lesson/:id", async (req, res) => {
  const lessonId = req.params.id;
  try {
    const lessonQuery = await sql.query(`
      SELECT 
        l.intLessonId AS id,
        s.txtSubjectName AS subject,
        CONVERT(VARCHAR(10), l.datLessonDate, 120) AS date,  -- –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è
        l.txtTheme AS theme,
        t.txtTeacherName AS teacher
      FROM tblLesson l
      JOIN tblSubject s ON l.intSubjectId = s.intSubjectId
      JOIN tblTeacher t ON s.intTeacherId = t.intTeacherId
      WHERE l.intLessonId = ${lessonId}
    `);

    const pupilsQuery = await sql.query(`
      SELECT 
        p.txtPupilSurname AS surname,
        p.txtPupilName AS name,
        CONVERT(VARCHAR(10), p.datBirthday, 120) AS birthdate,  -- –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è
        m.intMarkValue AS grade,
        m.txtMarkComment AS comment
      FROM tblMark m
      JOIN tblPupil p ON m.intPupilId = p.intPupilId
      WHERE m.intLessonId = ${lessonId}
    `);

    if (lessonQuery.recordset.length === 0) {
      return res.status(404).json({ error: "–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    res.json({
      lesson: lessonQuery.recordset[0],
      students: pupilsQuery.recordset,
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});
// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤
app.get("/pupils", async (req, res) => {
  try {
    const result = await sql.query(`
        SELECT 
          intPupilId AS id, 
          txtPupilSurname AS surname, 
          txtPupilName AS name, 
          CONVERT(VARCHAR(10), datBirthday, 120) AS birthdate
        FROM tblPupil
      `);
    res.json(result.recordset);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–µ–Ω–∏–∫–æ–≤:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});
app.post("/grade", async (req, res) => {
  const { lessonId, pupilId, grade, comment } = req.body;
  try {
    const request = new sql.Request();
    request.input("lessonId", sql.Int, lessonId);
    request.input("pupilId", sql.Int, pupilId);
    request.input("grade", sql.Int, grade);
    request.input("comment", sql.NVarChar, comment);
    await request.query(`
        INSERT INTO tblMark (intLessonId, intPupilId, intMarkValue, txtMarkComment)
        VALUES (@lessonId, @pupilId, @grade, @comment)
      `);
    res.status(201).json({ message: "–û—Ü–µ–Ω–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
