const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const sql = require("mssql");
const puppeteer = require("puppeteer"); // –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF

const app = express();
const PORT = 3000;

// –ò—Å–ø–æ–ª—å–∑—É–µ–º CORS, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –º–æ–≥ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
app.use(cors());
app.use(bodyParser.json());

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbConfig = {
  user: "User080",
  password: "User080^]98",
  server: "192.168.112.103", // –ù–∞–ø—Ä–∏–º–µ—Ä, "university.database.windows.net"
  database: "db22207",
  options: {
    encrypt: true,
    trustServerCertificate: true,
  },
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function connectDB() {
  try {
    await sql.connect(dbConfig);
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ:", err);
  }
}
connectDB();

// üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É—Ä–æ–∫–∏ —Å —É—á–∏—Ç–µ–ª—è–º–∏
app.get("/lessons", async (req, res) => {
  try {
    const result = await sql.query(`
      SELECT 
        l.intLessonId AS id,
        s.txtSubjectName AS subject,
        CONVERT(VARCHAR(10), l.datLessonDate, 120) AS date,  -- –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è
        l.txtTheme AS theme,
        t.txtTeacherName AS teacher
      FROM tblLesson l
      JOIN tblSubject s ON l.intSubjectId = s.intSubjectId
      JOIN tblTeacher t ON s.intTeacherId = t.intTeacherId
    `);
    res.json(result.recordset);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–∫–æ–≤:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞
app.post("/lesson", async (req, res) => {
  const { subject, date, theme } = req.body;

  try {
    const request = new sql.Request();
    request.input("subject", sql.NVarChar, subject);
    request.input("date", sql.Date, date);
    request.input("theme", sql.NVarChar, theme);

    await request.query(`
        INSERT INTO tblLesson (intSubjectId, datLessonDate, txtTheme)
        VALUES (
          (SELECT intSubjectId FROM tblSubject WHERE txtSubjectName = @subject),
          @date,
          @theme
        )
      `);

    res.status(201).json({ message: "–£—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–∫–µ –∏ —É—á–µ–Ω–∏–∫–∞—Ö
app.get("/lesson/:id", async (req, res) => {
  const lessonId = req.params.id;
  try {
    const lessonQuery = await sql.query(`
      SELECT 
        l.intLessonId AS id,
        s.txtSubjectName AS subject,
        CONVERT(VARCHAR(10), l.datLessonDate, 120) AS date,  -- –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è
        l.txtTheme AS theme,
        t.txtTeacherName AS teacher
      FROM tblLesson l
      JOIN tblSubject s ON l.intSubjectId = s.intSubjectId
      JOIN tblTeacher t ON s.intTeacherId = t.intTeacherId
      WHERE l.intLessonId = ${lessonId}
    `);

    const pupilsQuery = await sql.query(`
      SELECT 
        p.txtPupilSurname AS surname,
        p.txtPupilName AS name,
        CONVERT(VARCHAR(10), p.datBirthday, 120) AS birthdate,  -- –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è
        m.intMarkValue AS grade,
        m.txtMarkComment AS comment
      FROM tblMark m
      JOIN tblPupil p ON m.intPupilId = p.intPupilId
      WHERE m.intLessonId = ${lessonId}
    `);

    if (lessonQuery.recordset.length === 0) {
      return res.status(404).json({ error: "–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    res.json({
      lesson: lessonQuery.recordset[0],
      students: pupilsQuery.recordset,
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤
app.get("/pupils", async (req, res) => {
  try {
    const result = await sql.query(`
        SELECT 
          intPupilId AS id, 
          txtPupilSurname AS surname, 
          txtPupilName AS name, 
          CONVERT(VARCHAR(10), datBirthday, 120) AS birthdate
        FROM tblPupil
      `);
    res.json(result.recordset);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–µ–Ω–∏–∫–æ–≤:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
app.post("/grade", async (req, res) => {
  const { lessonId, pupilId, grade, comment } = req.body;
  try {
    const request = new sql.Request();
    request.input("lessonId", sql.Int, lessonId);
    request.input("pupilId", sql.Int, pupilId);
    request.input("grade", sql.Int, grade);
    request.input("comment", sql.NVarChar, comment);
    await request.query(`
        INSERT INTO tblMark (intLessonId, intPupilId, intMarkValue, txtMarkComment)
        VALUES (@lessonId, @pupilId, @grade, @comment)
      `);
    res.status(201).json({ message: "–û—Ü–µ–Ω–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// üîπ –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF-–æ—Ç—á–µ—Ç–∞ "–£—á–∏—Ç–µ–ª—è"
app.get("/teachers", async (req, res) => {
  try {
    // –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const teachersQuery = await sql.query(`
      SELECT 
        t.txtTeacherName AS teacherName,
        t.intTeacherYear AS hireYear,        -- –ò—Å–ø–æ–ª—å–∑—É–µ–º intTeacherYear
        t.fltTeacherSalary AS salary,        -- –ò—Å–ø–æ–ª—å–∑—É–µ–º fltTeacherSalary
        s.txtSubjectName AS subjectName,
        s.intSubjectVolume AS hours,         -- –ò—Å–ø–æ–ª—å–∑—É–µ–º intSubjectVolume
        COUNT(l.intLessonId) AS lessonsCount
      FROM tblTeacher t
      LEFT JOIN tblSubject s ON t.intTeacherId = s.intTeacherId
      LEFT JOIN tblLesson l ON s.intSubjectId = l.intSubjectId
      GROUP BY t.txtTeacherName, t.intTeacherYear, t.fltTeacherSalary, s.txtSubjectName, s.intSubjectVolume
    `);

    const teachersData = teachersQuery.recordset;

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É—á–∏—Ç–µ–ª—è–º
    const groupedData = {};
    teachersData.forEach((row) => {
      const {
        teacherName,
        hireYear,
        salary,
        subjectName,
        hours,
        lessonsCount,
      } = row;

      if (!groupedData[teacherName]) {
        groupedData[teacherName] = {
          hireYear,
          salary,
          subjects: [],
          totalSubjects: 0,
          totalHours: 0,
        };
      }

      if (subjectName) {
        groupedData[teacherName].subjects.push({
          subjectName,
          hours,
          lessonsCount,
        });
        groupedData[teacherName].totalSubjects += 1;
        groupedData[teacherName].totalHours += hours || 0;
      }
    });

    // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è PDF
    const htmlContent = `
      <!DOCTYPE html>
      <html lang="ru">
      <head>
        <meta charset="UTF-8">
        <title>–£—á–∏—Ç–µ–ª—è</title>
        <style>
          table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
          th, td { border: 1px solid black; padding: 8px; text-align: left; }
          hr { margin: 20px 0; }
          .summary { font-weight: bold; margin-top: 10px; }
        </style>
      </head>
      <body>
        ${Object.entries(groupedData)
          .map(
            ([teacherName, data]) => `
            <h2>${teacherName}</h2>
            <p>–ì–æ–¥ –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–∞ —Ä–∞–±–æ—Ç—É: ${data.hireYear}</p>
            <p>–û–∫–ª–∞–¥: ${data.salary} —Ä—É–±.</p>
            <table>
              <thead>
                <tr>
                  <th>–ü—Ä–µ–¥–º–µ—Ç</th>
                  <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤</th>
                  <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤</th>
                </tr>
              </thead>
              <tbody>
                ${data.subjects
                  .map(
                    (subject) => `
                      <tr>
                        <td>${subject.subjectName}</td>
                        <td>${subject.hours}</td>
                        <td>${subject.lessonsCount}</td>
                      </tr>
                    `
                  )
                  .join("")}
              </tbody>
            </table>
            <div class="summary">
              –°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${data.totalSubjects}<br>
              –°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤: ${data.totalHours}
            </div>
            <hr>
          `
          )
          .join("")}
        <p><strong>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∏—Ç–µ–ª–µ–π: ${
          Object.keys(groupedData).length
        }</strong></p>
      </body>
      </html>
    `;

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Å –ø–æ–º–æ—â—å—é Puppeteer
    const browser = await puppeteer.launch();
    const page = await browser.newPage();
    await page.setContent(htmlContent, { waitUntil: "networkidle0" });
    const pdfBuffer = await page.pdf({ format: "A4" });
    await browser.close();

    // –û—Ç–ø—Ä–∞–≤–∫–∞ PDF –≤ –æ—Ç–≤–µ—Ç
    res.setHeader("Content-Type", "application/pdf");
    res.setHeader("Content-Disposition", 'attachment; filename="–£—á–∏—Ç–µ–ª—è.pdf"');
    res.send(pdfBuffer);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
